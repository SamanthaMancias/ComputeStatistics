# -*- coding: utf-8 -*-
"""computeStatistics

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KFmeNutdA0Vucz6WwCoLPZvwV0REG2WL
"""

import time

#     Calculate descriptive statistics for a list of numbers.


#    Returns:
#        dict: Dictionary containing descriptive statistics.
#            - 'count': Count of numbers
#            - 'mean': Mean of the numbers
#            - 'median': Median of the numbers
#            - 'mode': Mode of the numbers
#            - 'variance': Variance of the numbers
#            - 'std_deviation': Standard deviation of the numbers
#            - 'elapsed_time': Time taken for computation


def read_file(FILE_PATH):
    try:
        with open(FILE_PATH, 'r', encoding='utf-8') as file:
            numbers = [float(x) for x in file.read().split()]
        return numbers
    except FileNotFoundError as e:
        print(f"Error: File not found - {e}")
        return None
    except Exception as e:
        print(f"Error reading file: {e}")
        return None


def compute_statistics(number_list):
    if not number_list:
        return None

    start_time = time.time()

    n = len(number_list)
    mean = sum(number_list) / n

    sorted_numbers = sorted(number_list)
    middle = n // 2

    median = (sorted_numbers[middle] +
              sorted_numbers[middle - 1]) / 2 if n % 2 == 0 else sorted_numbers[middle]

    number_count = {}
    for num in number_list:
        number_count[num] = number_count.get(num, 0) + 1

    mode = [k for k, v in number_count.items() if v == max(number_count.values())]

    squared_diff = sum((x - mean) ** 2 for x in number_list)
    variance = squared_diff / n
    std_deviation = variance ** 0.5

    elapsed_time = time.time() - start_time

    return {
        "count": n,
        "mean": mean,
        "median": median,
        "mode": mode,
        "variance": variance,
        "std_deviation": std_deviation,
        "elapsed_time": elapsed_time
    }


def write_results_to_file(results):
    with open('StatisticsResults.txt', 'w') as file:
        file.write(f"Count: {results['count']}\n")
        file.write(f"Mean: {results['mean']:.6f}\n")
        file.write(f"Median: {results['median']:.6f}\n")
        file.write(f"Mode: {results['mode']}\n")
        file.write(f"Variance: {results['variance']:.6f}\n")
        file.write(f"Standard Deviation: {results['std_deviation']:.6f}\n")
        file.write(f"Elapsed Time: {results['elapsed_time']:.6f} seconds\n")


def main(FILE_PATH):
    numbers = read_file(FILE_PATH)

    # Req 3: Handle invalid data
    if numbers is None:
        return

    results = compute_statistics(numbers)

    # Req 7: Print elapsed time on the screen
    print(f"Elapsed Time: {results['elapsed_time']:.6f} seconds")

    # Req 2: Print results on the screen
    print(f"Count: {results['count']}")
    print(f"Mean: {results['mean']:.6f}")
    print(f"Median: {results['median']:.6f}")
    print(f"Mode: {results['mode']}")
    print(f"Variance: {results['variance']:.6f}")
    print(f"Standard Deviation: {results['std_deviation']:.6f}")

    # Req 7: Write results to file
    write_results_to_file(results)


if __name__ == "__main__":
    # Req 5: Provide the file path directly in the script for Jupyter Notebook usage
    FILE_PATH = 'fileWithDataP1.txt'


    # Run the main function
    main(FILE_PATH)